# every 4 marks. 4*0:g_range[2] is equivalent to c(0,4,8,12).
axis(2, las=1, at=10*0:g_range[2])
# Create box around plot
box()
# Graph trucks with red dashed line and square points
#lines(NewA, type="o", pch=22, lty=2, col=12)
#lines(RetrA, type="o", pch=22, lty=2, col=454)
#lines(NewB, type="o", pch=22, lty=2, col=32)
lines(BposB, type="o", pch=22, lty=2, col=34)
#lines(RetrB, type="o", pch=22, lty=2, col=57)
# Create a title with a red, bold/italic font
title(main="SEBOCHE TB TREATMENT OUTCOMES", col.main="red", font.main=3)
abline(h =85, col="green",lty=1)
abline(h =5, col="green",lty=1)
# Label the x and y axes with dark green text
title(xlab="Years", col.lab=rgb(0,0.5,0), font.lab =3)
title(ylab="% Outcome", col.lab=rgb(0,0.5,0),font.lab =3)
# Create a legend at (1, g_range[2]) that is slightly smaller
# (cex) and uses the same line colors and points used by
# the actual plots
legend("toplef",c("TSR New B+","Death New B+"), cex=0.8,
col=c(26,12,454,32,34,57), pch=21:22, lty=1:2);
g_range <- range(0, 100)
# Graph Type using y axis that ranges from 0 to max
# value in cars or trucks vector.  Turn off axes and
# annotations (axis labels) so we can specify them ourself
plot(BposA, type="o", col=26, ylim=g_range,
axes=FALSE, ann=FALSE)
# Make x axis using Years labels
axis(1, at=1:6, lab=c(2009,2010,2011,2012,2013,2014))
# Make y axis with horizontal labels that display ticks at
# every 4 marks. 4*0:g_range[2] is equivalent to c(0,4,8,12).
axis(2, las=1, at=10*0:g_range[2])
# Create box around plot
box()
# Graph trucks with red dashed line and square points
#lines(NewA, type="o", pch=22, lty=2, col=12)
#lines(RetrA, type="o", pch=22, lty=2, col=454)
#lines(NewB, type="o", pch=22, lty=2, col=32)
lines(BposB, type="o", pch=22, lty=2, col="blue")
#lines(RetrB, type="o", pch=22, lty=2, col=57)
# Create a title with a red, bold/italic font
title(main="SEBOCHE TB TREATMENT OUTCOMES", col.main="red", font.main=3)
abline(h =85, col="green",lty=1)
abline(h =5, col="green",lty=1)
# Label the x and y axes with dark green text
title(xlab="Years", col.lab=rgb(0,0.5,0), font.lab =3)
title(ylab="% Outcome", col.lab=rgb(0,0.5,0),font.lab =3)
# Create a legend at (1, g_range[2]) that is slightly smaller
# (cex) and uses the same line colors and points used by
# the actual plots
legend("toplef",c("TSR New B+","Death New B+"), cex=0.8,
col=c(26,12,454,32,34,57), pch=21:22, lty=1:2);
View(type)
plot(Type)
plot(Type, type ="o")
plot(Type, type ="l")
plot(Years,Type)
barplot(Years,Type)
install.packages(c("DeSolve" "stringr"))
install.packages(c("DeSolve","stringr"))
install.packages("stringr")
library(ggplot2)
# Scale naming convention ----------------------------------------------------
# Default scales
scale_x_continuous()
scale_y_discrete()
scale_colour_discrete()
# Custom scales
scale_colour_hue()
scale_x_log10()
scale_fill_brewer()
# Scales with parameters
scale_x_continuous("X Label", limits = c(1, 10))
scale_colour_gradient(low = "blue", high = "red")
# Changing ticks and labels --------------------------------------------------
p <- qplot(cyl, displ, data = mpg)
# First argument (name) controls axis label
p + scale_y_continuous("Displacement (l)")
p + scale_x_continuous("Cylinders")
# Breaks and labels control tick marks
p + scale_x_continuous(breaks = c(4, 6, 8))
p + scale_x_continuous(breaks = c(4, 6, 8),
labels = c("small", "medium", "big"))
# Limits control range of data
p + scale_y_continuous(limits = c(1, 8))
# same as:
p + ylim(1, 8)
### Real example with continuous data
p <- qplot(carat, price, data = diamonds, geom = "hex")
# First argument (name) controls legend title
p + scale_fill_continuous("Count")
# Breaks and labels control legend keys
p + scale_fill_continuous(breaks = c(1000, 3500, 7000))
p + scale_fill_continuous(breaks = c(0, 4000, 8000))
# Why don't 0 and 8000 have colours?
p + scale_fill_continuous(breaks = c(0, 4000, 8000),
limits = c(0, 8000))
# Can use labels to make more human readable
breaks <- c(0, 2000, 4000, 6000, 8000)
labels <- format(breaks, big.mark = ",")
p + scale_fill_continuous(breaks = breaks, labels = labels,
limits = c(0, 8000))
### Basically the same for discrete variables
p <- qplot(color, carat, data = diamonds)
p + scale_x_discrete("Color")
# Except limits is now a character vector
p + scale_x_discrete(limits = c("D", "E", "F"))
# Should work for boxplots too
qplot(color, carat, data = diamonds,
geom = "boxplot") +
scale_x_discrete(limits = c("D", "E", "F"))
# Themes ---------------------------------------------------------------------
# Two built in themes.  The default:
qplot(carat, price, data = diamonds)
# And a theme with a white background:
qplot(carat, price, data = diamonds) + theme_bw()
# Use theme_set if you want it to apply to every
# future plot.
theme_set(theme_bw())
# This is the best way of seeing all the default
# options
theme_bw()
theme_grey()
p <- qplot(displ, hwy, data = mpg) +
opts(title = "Bigger engines are less efficient")
# To modify a plot
p
p + opts(plot.title =
theme_text(size = 12, face = "bold"))
p + opts(plot.title = theme_text(colour = "red"))
p + opts(plot.title = theme_text(angle = 45))
p + opts(plot.title = theme_text(hjust = 1))
# Saving your work -----------------------------------------------------------
qplot(carat, price, data = diamonds)
ggsave("diamonds.png")
# Selects graphics device based on extension
ggsave("diamonds.pdf")
# Uses on-screen device size, or override with
# width & height (to be reproducible)
ggsave("diamonds.png", width = 6, height = 6)
# Outputs last plot by default, override
# with plot:
dplot <- qplot(carat, price, data = diamonds)
ggsave("diamonds.png", plot = dplot)
# Defaults to 300 dpi for png
ggsave("diamonds.png", dpi = 72)
# Clean up -------------------------------------------------------------------
unlink("diamonds.png")
unlink("diamonds.pdf")
install.packages("hexbin")
library(ggplot2)
# Scale naming convention ----------------------------------------------------
# Default scales
scale_x_continuous()
scale_y_discrete()
scale_colour_discrete()
# Custom scales
scale_colour_hue()
scale_x_log10()
scale_fill_brewer()
# Scales with parameters
scale_x_continuous("X Label", limits = c(1, 10))
scale_colour_gradient(low = "blue", high = "red")
# Changing ticks and labels --------------------------------------------------
p <- qplot(cyl, displ, data = mpg)
# First argument (name) controls axis label
p + scale_y_continuous("Displacement (l)")
p + scale_x_continuous("Cylinders")
# Breaks and labels control tick marks
p + scale_x_continuous(breaks = c(4, 6, 8))
p + scale_x_continuous(breaks = c(4, 6, 8),
labels = c("small", "medium", "big"))
# Limits control range of data
p + scale_y_continuous(limits = c(1, 8))
# same as:
p + ylim(1, 8)
### Real example with continuous data
p <- qplot(carat, price, data = diamonds, geom = "hex")
# First argument (name) controls legend title
p + scale_fill_continuous("Count")
# Breaks and labels control legend keys
p + scale_fill_continuous(breaks = c(1000, 3500, 7000))
p + scale_fill_continuous(breaks = c(0, 4000, 8000))
# Why don't 0 and 8000 have colours?
p + scale_fill_continuous(breaks = c(0, 4000, 8000),
limits = c(0, 8000))
# Can use labels to make more human readable
breaks <- c(0, 2000, 4000, 6000, 8000)
labels <- format(breaks, big.mark = ",")
p + scale_fill_continuous(breaks = breaks, labels = labels,
limits = c(0, 8000))
### Basically the same for discrete variables
p <- qplot(color, carat, data = diamonds)
p + scale_x_discrete("Color")
# Except limits is now a character vector
p + scale_x_discrete(limits = c("D", "E", "F"))
# Should work for boxplots too
qplot(color, carat, data = diamonds,
geom = "boxplot") +
scale_x_discrete(limits = c("D", "E", "F"))
# Themes ---------------------------------------------------------------------
# Two built in themes.  The default:
qplot(carat, price, data = diamonds)
# And a theme with a white background:
qplot(carat, price, data = diamonds) + theme_bw()
# Use theme_set if you want it to apply to every
# future plot.
theme_set(theme_bw())
# This is the best way of seeing all the default
# options
theme_bw()
theme_grey()
p <- qplot(displ, hwy, data = mpg) +
opts(title = "Bigger engines are less efficient")
# To modify a plot
p
p + opts(plot.title =
theme_text(size = 12, face = "bold"))
p + opts(plot.title = theme_text(colour = "red"))
p + opts(plot.title = theme_text(angle = 45))
p + opts(plot.title = theme_text(hjust = 1))
# Saving your work -----------------------------------------------------------
qplot(carat, price, data = diamonds)
ggsave("diamonds.png")
# Selects graphics device based on extension
ggsave("diamonds.pdf")
# Uses on-screen device size, or override with
# width & height (to be reproducible)
ggsave("diamonds.png", width = 6, height = 6)
# Outputs last plot by default, override
# with plot:
dplot <- qplot(carat, price, data = diamonds)
ggsave("diamonds.png", plot = dplot)
# Defaults to 300 dpi for png
ggsave("diamonds.png", dpi = 72)
# Clean up -------------------------------------------------------------------
unlink("diamonds.png")
unlink("diamonds.pdf")
library("markdown", lib.loc="~/R/win-library/3.1")
Bullet 1
- Bullet three
dataurl <- "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
download.file(dataurl,"specdata.zip")
unzip("specdata.zip", exdir= "specdata1")
directory <- "C:/Users/Tseliso/Documents/SCHOOL/Coursera/R/Programming assignment 1/specdata"
files <- list.files("specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
dataurl <- "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
download.file(dataurl,"specdata.zip")
unzip("specdata.zip", exdir= "specdata1")
directory <- "C:/Users/Tseliso/Documents/SCHOOL/Coursera/R/Programming assignment 1/specdata"
files <- list.files("specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 20)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 20)
data = numeric()
for (i in 1:332) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 20)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in 1:332) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 20)
setwd("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1")
activity <- read.csv("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1/activity.csv")
physactivity <- activity
physiactivty <-ts(physactivity,skip = 2)
plot.ts(physiactivty)
physiactivty <-ts(physactivity)
plot.ts(physiactivty)
plot.ts(physiactivty, skip =2)
warnings()
physiactivty <-ts(physactivity, skip =2)
plot.ts(physiactivty)
View(physactivity)
pa <- physactivity[,1,3]
pactivity <- read.csv("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1/activity.csv")
physiactivty <-ts(pactivity)
plot.ts(physiactivty)
plot.ts(physiactivty)
plot.ts(physiactivty)
p <-ts(pactivity)
plot.ts(p)
View(pactivity)
pactivity <- read.csv("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1/pactivity.csv")
p <-ts(pactivity)
plot.ts(p)
plot.ts(p, x = interval, y = steps)
args(plot.ts)
plot.ts(x = p$interval, y = p$steps)
plot.ts(x = interval, y = steps)
plot.ts(x = interval, y = steps, p)
plot.ts(x = "interval", y = "steps")
plot.ts(x = "interval", y = "steps", na.rm =TRUE)
plot(x = "interval", y = "steps", type = "l")
plot(x = interval, y = steps, type = "l")
plot(data=p, x = interval, y = steps, type = "l")
plot(x = p$interval, y = p$steps, type = "l")
plot(x = physactivity$interval, y = physactivity$steps, type = "l")
plot(x = physactivity$interval, y = physactivity$steps, type = "l"
xlab = "Interval", ylab = "Steps")
plot(x = physactivity$interval, y = physactivity$steps, type = "l",
xlab = "Interval", ylab = "Steps")
plot(physactivity, interval, steps,type = "l",
xlab = "Interval", ylab = "Steps")
plot(x = physactivity$interval, y = physactivity$steps, type = "l", colour = "red"","
xlab = "Interval", ylab = "Steps")
plot(x = physactivity$interval, y = physactivity$steps, type = "l", colour = "red",
xlab = "Interval", ylab = "Steps")
plot(x = physactivity$interval, y = physactivity$steps, type = "l", color = "red",
xlab = "Interval", ylab = "Steps")
plot(x = physactivity$interval, y = physactivity$steps, type = "l",main = "Average Number of Steps per time interval",
xlab = "Interval", ylab = "Steps")
maxsteps <- subset(physactivity, interval, na.rm =TRUE)
maxsteps <- !is.na(physactivity[,interval])
maxsteps <- !is.na(physactivity)
View(maxsteps)
which(maxsteps$interval[max(steps)])
which(maxsteps[interval[max(steps)]])
maxsteps <- subset(physactivity, interval, na.rm =T)
max(physactivity$steps)
max(physactivity$steps, na.rm = T)
cleanactivity <- physactivity[!is.na(physactivity)]
max(steps[cleanactivity[,interval]])
max(cleanactivity$steps[cleanactivity[,interval]])
max(physactivity$steps, na.rm = T)
physactivity$interval(x)
x <-which(physactivity$interval[max(physactivity$steps, na.rm = T)])
x <- max(physactivity$steps, na.rm = T)
x
physactivity$interval(x)
which(physactivity$interval,physactivity$steps == x )
myactivity <- which(!is.na(physactivity))
myactivity
maxactiv <- if(myactivity$steps==max(myactivity$steps)){
print(myactivity$interval)
}
maxactiv <- if(steps==max(steps)){
print(interval)
}
myactivity <- physactivity[which(!is.na(physactivity))]
myactivity <- physactivity(which(!is.na(physactivity)))
myactivity <- na.omit(physactivity)
View(myactivity)
maxactiv <- if(myactivity$steps==max(myactivity$steps)){
print(myactivity$interval)
}
max(myactivity$steps)
maxsteps <- max(myactivity$steps)
newdata <- subset(myactivity, steps == maxsteps,
select=c(date, interval))
newdata
newdata <- subset(myactivity, steps == maxsteps,
select=interval)
newdata
sum(is.na(physactivity))
sum(is.na(physactivity))
y <-mean(physactivity$steps, na.rm = T)
y
ifelse(is.na(physactivity), y, physactivity)
newdata <- ifelse(is.na(physactivity), y, physactivity)
newdata
physactivity[,which(is.na(physactivity))]
physactivity[,is.na(physactivity)]
which(is.na(physactivity))
x <- subset(physactivity, steps!="NA" && interval != "NA")
x
x <- subset(physactivity, steps!="NA" && interval != "NA", select = date)
x
x <- subset(physactivity, steps!="NA" && interval != "NA", select = c(date,interval))
x
x <- x<-subset(physactivity, is.na(physactivity))
x
sum(x)
count(x)
nrow(x)
sum(is.na(physactivity))
ifelse(is.na(physactivity$steps), y, physactivity)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
physactivity[is.na(physactivity)] <- y
physactivity[is.na(physactivity)] <- "y"
View(physactivity)
physactivity
physactivity <- read.csv("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1/physactivity.csv")
physactivity <- read.csv("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1/activity.csv")
newdata <-physactivity
newdata[is.na(newdata)] <- "y"
hist(newdata)
hist(newdata, x =steps)
hist(newdata$steps)
newdata$steps
newdata[is.na(newdata)] <- y
hist(newdata$steps)
newdata
head(newdata$steps)
newdata <-physactivity
head(newdata$steps)
y
newdata[is.na(newdata)] <- 37.3826
head(newdata$steps)
head(newdata$steps, 20)
head(newdata$steps, 50)
newdata
tail(newdata)
ta0il(newdata, )
tail(newdata, 50)
tail(newdata, 10)
tail(newdata, 100)
tail(newdata, 200)
mean(newdata$steps)
min(newdata$steps)
summary(newdata$steps)
hist(newdata$steps)
hist(newdata$steps, xlab = "Total Number Of Steps Taken")
hist(newdata$steps, main = "Histogram Of Number Of Steps taken Every Day", xlab = "Total Number Of Steps Taken")
median(newdata$steps)
args(weekday)
args(weekday())
weekday <- date[isWeekday(date)]
weekday <- date[isWeekday(date)]
install.packages("timeDate")
install.packages("timeDate")
as.POSIXlt(newdata$date, format="%y-%m-%d")
as.POSIXlt(newdata$date)
help(weekday)
??weekday
wday <- date[isWeekday(newdata, wday = 1:5)]
library("timeDate", lib.loc="~/R/win-library/3.1")
wday <- date[isWeekday(newdata, wday = 1:5)]
isWeekday(newdata, wday = 1:5)
setwd("C:/Users/Tseliso/datasciencecoursera/RepData_PeerAssessment1")
